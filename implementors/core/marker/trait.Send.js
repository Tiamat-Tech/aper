(function() {var implementors = {};
implementors["aper"] = [{"text":"impl&lt;Transition&gt; Send for SuspendedEvent&lt;Transition&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transition: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Transition&gt; Send for TransitionEvent&lt;Transition&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Transition: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PlayerID","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for StateUpdateMessage&lt;State&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;State as StateMachine&gt;::Transition: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aper_actix"] = [{"text":"impl&lt;State&gt; Send for ChannelActor&lt;State&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;State as StateMachine&gt;::Transition: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for WrappedStateUpdateMessage&lt;State&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;State as StateMachine&gt;::Transition: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for PlayerActor&lt;State&gt;","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for GetChannelMessage&lt;State&gt;","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for ServerActor&lt;State&gt;","synthetic":true,"types":[]},{"text":"impl Send for CreateChannelMessage","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for ChannelMessage&lt;State&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;State as StateMachine&gt;::Transition: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aper_yew"] = [{"text":"impl&lt;View&gt; !Send for Props&lt;View&gt;","synthetic":true,"types":[]},{"text":"impl&lt;View&gt; !Send for StateMachineComponent&lt;View&gt;","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for Status&lt;State&gt;","synthetic":true,"types":[]},{"text":"impl&lt;State&gt; Send for Msg&lt;State&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;State as StateMachine&gt;::Transition: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()